// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufMessages.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtobufMessages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ProtobufMessages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ProtobufMessages_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtobufMessages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ProtobufMessages_2eproto;
namespace messages {
class Battery;
struct BatteryDefaultTypeInternal;
extern BatteryDefaultTypeInternal _Battery_default_instance_;
class PingPong;
struct PingPongDefaultTypeInternal;
extern PingPongDefaultTypeInternal _PingPong_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class ProtobufMessage;
struct ProtobufMessageDefaultTypeInternal;
extern ProtobufMessageDefaultTypeInternal _ProtobufMessage_default_instance_;
class TrackerAdded;
struct TrackerAddedDefaultTypeInternal;
extern TrackerAddedDefaultTypeInternal _TrackerAdded_default_instance_;
class TrackerStatus;
struct TrackerStatusDefaultTypeInternal;
extern TrackerStatusDefaultTypeInternal _TrackerStatus_default_instance_;
class TrackerStatus_ExtraEntry_DoNotUse;
struct TrackerStatus_ExtraEntry_DoNotUseDefaultTypeInternal;
extern TrackerStatus_ExtraEntry_DoNotUseDefaultTypeInternal _TrackerStatus_ExtraEntry_DoNotUse_default_instance_;
class UserAction;
struct UserActionDefaultTypeInternal;
extern UserActionDefaultTypeInternal _UserAction_default_instance_;
class UserAction_ActionArgumentsEntry_DoNotUse;
struct UserAction_ActionArgumentsEntry_DoNotUseDefaultTypeInternal;
extern UserAction_ActionArgumentsEntry_DoNotUseDefaultTypeInternal _UserAction_ActionArgumentsEntry_DoNotUse_default_instance_;
}  // namespace messages
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace messages {
enum Position_DataSource : int {
  Position_DataSource_NONE = 0,
  Position_DataSource_IMU = 1,
  Position_DataSource_PRECISION = 2,
  Position_DataSource_FULL = 3,
  Position_DataSource_Position_DataSource_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Position_DataSource_Position_DataSource_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Position_DataSource_IsValid(int value);
extern const uint32_t Position_DataSource_internal_data_[];
constexpr Position_DataSource Position_DataSource_DataSource_MIN = static_cast<Position_DataSource>(0);
constexpr Position_DataSource Position_DataSource_DataSource_MAX = static_cast<Position_DataSource>(3);
constexpr int Position_DataSource_DataSource_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Position_DataSource_descriptor();
template <typename T>
const std::string& Position_DataSource_Name(T value) {
  static_assert(std::is_same<T, Position_DataSource>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataSource_Name().");
  return Position_DataSource_Name(static_cast<Position_DataSource>(value));
}
template <>
inline const std::string& Position_DataSource_Name(Position_DataSource value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Position_DataSource_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Position_DataSource_Parse(absl::string_view name, Position_DataSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Position_DataSource>(
      Position_DataSource_descriptor(), name, value);
}
enum TrackerStatus_Status : int {
  TrackerStatus_Status_DISCONNECTED = 0,
  TrackerStatus_Status_OK = 1,
  TrackerStatus_Status_BUSY = 2,
  TrackerStatus_Status_ERROR = 3,
  TrackerStatus_Status_OCCLUDED = 4,
  TrackerStatus_Status_TrackerStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrackerStatus_Status_TrackerStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrackerStatus_Status_IsValid(int value);
extern const uint32_t TrackerStatus_Status_internal_data_[];
constexpr TrackerStatus_Status TrackerStatus_Status_Status_MIN = static_cast<TrackerStatus_Status>(0);
constexpr TrackerStatus_Status TrackerStatus_Status_Status_MAX = static_cast<TrackerStatus_Status>(4);
constexpr int TrackerStatus_Status_Status_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
TrackerStatus_Status_descriptor();
template <typename T>
const std::string& TrackerStatus_Status_Name(T value) {
  static_assert(std::is_same<T, TrackerStatus_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return TrackerStatus_Status_Name(static_cast<TrackerStatus_Status>(value));
}
template <>
inline const std::string& TrackerStatus_Status_Name(TrackerStatus_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrackerStatus_Status_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool TrackerStatus_Status_Parse(absl::string_view name, TrackerStatus_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrackerStatus_Status>(
      TrackerStatus_Status_descriptor(), name, value);
}
enum TrackerStatus_Confidence : int {
  TrackerStatus_Confidence_NO = 0,
  TrackerStatus_Confidence_LOW = 1,
  TrackerStatus_Confidence_MEDIUM = 5,
  TrackerStatus_Confidence_HIGH = 10,
  TrackerStatus_Confidence_TrackerStatus_Confidence_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrackerStatus_Confidence_TrackerStatus_Confidence_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TrackerStatus_Confidence_IsValid(int value);
extern const uint32_t TrackerStatus_Confidence_internal_data_[];
constexpr TrackerStatus_Confidence TrackerStatus_Confidence_Confidence_MIN = static_cast<TrackerStatus_Confidence>(0);
constexpr TrackerStatus_Confidence TrackerStatus_Confidence_Confidence_MAX = static_cast<TrackerStatus_Confidence>(10);
constexpr int TrackerStatus_Confidence_Confidence_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
TrackerStatus_Confidence_descriptor();
template <typename T>
const std::string& TrackerStatus_Confidence_Name(T value) {
  static_assert(std::is_same<T, TrackerStatus_Confidence>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Confidence_Name().");
  return TrackerStatus_Confidence_Name(static_cast<TrackerStatus_Confidence>(value));
}
template <>
inline const std::string& TrackerStatus_Confidence_Name(TrackerStatus_Confidence value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrackerStatus_Confidence_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool TrackerStatus_Confidence_Parse(absl::string_view name, TrackerStatus_Confidence* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrackerStatus_Confidence>(
      TrackerStatus_Confidence_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserAction_ActionArgumentsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          UserAction_ActionArgumentsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      UserAction_ActionArgumentsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  UserAction_ActionArgumentsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserAction_ActionArgumentsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit UserAction_ActionArgumentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const UserAction_ActionArgumentsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const UserAction_ActionArgumentsEntry_DoNotUse*>(
        &_UserAction_ActionArgumentsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "messages.UserAction.ActionArgumentsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "messages.UserAction.ActionArgumentsEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};
// -------------------------------------------------------------------

class TrackerStatus_ExtraEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          TrackerStatus_ExtraEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      TrackerStatus_ExtraEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TrackerStatus_ExtraEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrackerStatus_ExtraEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TrackerStatus_ExtraEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TrackerStatus_ExtraEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TrackerStatus_ExtraEntry_DoNotUse*>(
        &_TrackerStatus_ExtraEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "messages.TrackerStatus.ExtraEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "messages.TrackerStatus.ExtraEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};
// -------------------------------------------------------------------

class TrackerAdded final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.TrackerAdded) */ {
 public:
  inline TrackerAdded() : TrackerAdded(nullptr) {}
  ~TrackerAdded() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrackerAdded(::google::protobuf::internal::ConstantInitialized);

  inline TrackerAdded(const TrackerAdded& from)
      : TrackerAdded(nullptr, from) {}
  TrackerAdded(TrackerAdded&& from) noexcept
    : TrackerAdded() {
    *this = ::std::move(from);
  }

  inline TrackerAdded& operator=(const TrackerAdded& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackerAdded& operator=(TrackerAdded&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackerAdded& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackerAdded* internal_default_instance() {
    return reinterpret_cast<const TrackerAdded*>(
               &_TrackerAdded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrackerAdded& a, TrackerAdded& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackerAdded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackerAdded* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackerAdded* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackerAdded>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrackerAdded& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TrackerAdded& from) {
    TrackerAdded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TrackerAdded* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messages.TrackerAdded";
  }
  protected:
  explicit TrackerAdded(::google::protobuf::Arena* arena);
  TrackerAdded(::google::protobuf::Arena* arena, const TrackerAdded& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackerSerialFieldNumber = 2,
    kTrackerNameFieldNumber = 3,
    kTrackerIdFieldNumber = 1,
    kTrackerRoleFieldNumber = 4,
  };
  // string tracker_serial = 2;
  void clear_tracker_serial() ;
  const std::string& tracker_serial() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tracker_serial(Arg_&& arg, Args_... args);
  std::string* mutable_tracker_serial();
  PROTOBUF_NODISCARD std::string* release_tracker_serial();
  void set_allocated_tracker_serial(std::string* value);

  private:
  const std::string& _internal_tracker_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracker_serial(
      const std::string& value);
  std::string* _internal_mutable_tracker_serial();

  public:
  // string tracker_name = 3;
  void clear_tracker_name() ;
  const std::string& tracker_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tracker_name(Arg_&& arg, Args_... args);
  std::string* mutable_tracker_name();
  PROTOBUF_NODISCARD std::string* release_tracker_name();
  void set_allocated_tracker_name(std::string* value);

  private:
  const std::string& _internal_tracker_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracker_name(
      const std::string& value);
  std::string* _internal_mutable_tracker_name();

  public:
  // int32 tracker_id = 1;
  void clear_tracker_id() ;
  ::int32_t tracker_id() const;
  void set_tracker_id(::int32_t value);

  private:
  ::int32_t _internal_tracker_id() const;
  void _internal_set_tracker_id(::int32_t value);

  public:
  // int32 tracker_role = 4;
  void clear_tracker_role() ;
  ::int32_t tracker_role() const;
  void set_tracker_role(::int32_t value);

  private:
  ::int32_t _internal_tracker_role() const;
  void _internal_set_tracker_role(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:messages.TrackerAdded)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr tracker_serial_;
    ::google::protobuf::internal::ArenaStringPtr tracker_name_;
    ::int32_t tracker_id_;
    ::int32_t tracker_role_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};// -------------------------------------------------------------------

class Position final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Position(::google::protobuf::internal::ConstantInitialized);

  inline Position(const Position& from)
      : Position(nullptr, from) {}
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Position* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messages.Position";
  }
  protected:
  explicit Position(::google::protobuf::Arena* arena);
  Position(::google::protobuf::Arena* arena, const Position& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DataSource = Position_DataSource;
  static constexpr DataSource NONE = Position_DataSource_NONE;
  static constexpr DataSource IMU = Position_DataSource_IMU;
  static constexpr DataSource PRECISION = Position_DataSource_PRECISION;
  static constexpr DataSource FULL = Position_DataSource_FULL;
  static inline bool DataSource_IsValid(int value) {
    return Position_DataSource_IsValid(value);
  }
  static constexpr DataSource DataSource_MIN = Position_DataSource_DataSource_MIN;
  static constexpr DataSource DataSource_MAX = Position_DataSource_DataSource_MAX;
  static constexpr int DataSource_ARRAYSIZE = Position_DataSource_DataSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DataSource_descriptor() {
    return Position_DataSource_descriptor();
  }
  template <typename T>
  static inline const std::string& DataSource_Name(T value) {
    return Position_DataSource_Name(value);
  }
  static inline bool DataSource_Parse(absl::string_view name, DataSource* value) {
    return Position_DataSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrackerIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kQxFieldNumber = 5,
    kQyFieldNumber = 6,
    kQzFieldNumber = 7,
    kQwFieldNumber = 8,
    kDataSourceFieldNumber = 9,
  };
  // int32 tracker_id = 1;
  void clear_tracker_id() ;
  ::int32_t tracker_id() const;
  void set_tracker_id(::int32_t value);

  private:
  ::int32_t _internal_tracker_id() const;
  void _internal_set_tracker_id(::int32_t value);

  public:
  // optional float x = 2;
  bool has_x() const;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // optional float y = 3;
  bool has_y() const;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // optional float z = 4;
  bool has_z() const;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // float qx = 5;
  void clear_qx() ;
  float qx() const;
  void set_qx(float value);

  private:
  float _internal_qx() const;
  void _internal_set_qx(float value);

  public:
  // float qy = 6;
  void clear_qy() ;
  float qy() const;
  void set_qy(float value);

  private:
  float _internal_qy() const;
  void _internal_set_qy(float value);

  public:
  // float qz = 7;
  void clear_qz() ;
  float qz() const;
  void set_qz(float value);

  private:
  float _internal_qz() const;
  void _internal_set_qz(float value);

  public:
  // float qw = 8;
  void clear_qw() ;
  float qw() const;
  void set_qw(float value);

  private:
  float _internal_qw() const;
  void _internal_set_qw(float value);

  public:
  // optional .messages.Position.DataSource data_source = 9;
  bool has_data_source() const;
  void clear_data_source() ;
  ::messages::Position_DataSource data_source() const;
  void set_data_source(::messages::Position_DataSource value);

  private:
  ::messages::Position_DataSource _internal_data_source() const;
  void _internal_set_data_source(::messages::Position_DataSource value);

  public:
  // @@protoc_insertion_point(class_scope:messages.Position)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t tracker_id_;
    float x_;
    float y_;
    float z_;
    float qx_;
    float qy_;
    float qz_;
    float qw_;
    int data_source_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};// -------------------------------------------------------------------

class PingPong final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:messages.PingPong) */ {
 public:
  inline PingPong() : PingPong(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PingPong(::google::protobuf::internal::ConstantInitialized);

  inline PingPong(const PingPong& from)
      : PingPong(nullptr, from) {}
  PingPong(PingPong&& from) noexcept
    : PingPong() {
    *this = ::std::move(from);
  }

  inline PingPong& operator=(const PingPong& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingPong& operator=(PingPong&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingPong& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingPong* internal_default_instance() {
    return reinterpret_cast<const PingPong*>(
               &_PingPong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PingPong& a, PingPong& b) {
    a.Swap(&b);
  }
  inline void Swap(PingPong* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingPong* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingPong* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingPong>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PingPong& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PingPong& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messages.PingPong";
  }
  protected:
  explicit PingPong(::google::protobuf::Arena* arena);
  PingPong(::google::protobuf::Arena* arena, const PingPong& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:messages.PingPong)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};// -------------------------------------------------------------------

class Battery final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.Battery) */ {
 public:
  inline Battery() : Battery(nullptr) {}
  ~Battery() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Battery(::google::protobuf::internal::ConstantInitialized);

  inline Battery(const Battery& from)
      : Battery(nullptr, from) {}
  Battery(Battery&& from) noexcept
    : Battery() {
    *this = ::std::move(from);
  }

  inline Battery& operator=(const Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Battery& operator=(Battery&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Battery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Battery* internal_default_instance() {
    return reinterpret_cast<const Battery*>(
               &_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Battery& a, Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(Battery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Battery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Battery* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Battery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Battery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Battery& from) {
    Battery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Battery* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messages.Battery";
  }
  protected:
  explicit Battery(::google::protobuf::Arena* arena);
  Battery(::google::protobuf::Arena* arena, const Battery& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackerIdFieldNumber = 1,
    kBatteryLevelFieldNumber = 2,
    kIsChargingFieldNumber = 3,
  };
  // int32 tracker_id = 1;
  void clear_tracker_id() ;
  ::int32_t tracker_id() const;
  void set_tracker_id(::int32_t value);

  private:
  ::int32_t _internal_tracker_id() const;
  void _internal_set_tracker_id(::int32_t value);

  public:
  // float battery_level = 2;
  void clear_battery_level() ;
  float battery_level() const;
  void set_battery_level(float value);

  private:
  float _internal_battery_level() const;
  void _internal_set_battery_level(float value);

  public:
  // bool is_charging = 3;
  void clear_is_charging() ;
  bool is_charging() const;
  void set_is_charging(bool value);

  private:
  bool _internal_is_charging() const;
  void _internal_set_is_charging(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messages.Battery)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t tracker_id_;
    float battery_level_;
    bool is_charging_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};// -------------------------------------------------------------------

class UserAction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.UserAction) */ {
 public:
  inline UserAction() : UserAction(nullptr) {}
  ~UserAction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserAction(::google::protobuf::internal::ConstantInitialized);

  inline UserAction(const UserAction& from)
      : UserAction(nullptr, from) {}
  UserAction(UserAction&& from) noexcept
    : UserAction() {
    *this = ::std::move(from);
  }

  inline UserAction& operator=(const UserAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserAction& operator=(UserAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserAction* internal_default_instance() {
    return reinterpret_cast<const UserAction*>(
               &_UserAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserAction& a, UserAction& b) {
    a.Swap(&b);
  }
  inline void Swap(UserAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserAction& from) {
    UserAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserAction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messages.UserAction";
  }
  protected:
  explicit UserAction(::google::protobuf::Arena* arena);
  UserAction(::google::protobuf::Arena* arena, const UserAction& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kActionArgumentsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, string> action_arguments = 2;
  int action_arguments_size() const;
  private:
  int _internal_action_arguments_size() const;

  public:
  void clear_action_arguments() ;
  const ::google::protobuf::Map<std::string, std::string>& action_arguments() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_action_arguments();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_action_arguments() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_action_arguments();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:messages.UserAction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<UserAction_ActionArgumentsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        action_arguments_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};// -------------------------------------------------------------------

class TrackerStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.TrackerStatus) */ {
 public:
  inline TrackerStatus() : TrackerStatus(nullptr) {}
  ~TrackerStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrackerStatus(::google::protobuf::internal::ConstantInitialized);

  inline TrackerStatus(const TrackerStatus& from)
      : TrackerStatus(nullptr, from) {}
  TrackerStatus(TrackerStatus&& from) noexcept
    : TrackerStatus() {
    *this = ::std::move(from);
  }

  inline TrackerStatus& operator=(const TrackerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackerStatus& operator=(TrackerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackerStatus* internal_default_instance() {
    return reinterpret_cast<const TrackerStatus*>(
               &_TrackerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrackerStatus& a, TrackerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackerStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackerStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackerStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrackerStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TrackerStatus& from) {
    TrackerStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TrackerStatus* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messages.TrackerStatus";
  }
  protected:
  explicit TrackerStatus(::google::protobuf::Arena* arena);
  TrackerStatus(::google::protobuf::Arena* arena, const TrackerStatus& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  using Status = TrackerStatus_Status;
  static constexpr Status DISCONNECTED = TrackerStatus_Status_DISCONNECTED;
  static constexpr Status OK = TrackerStatus_Status_OK;
  static constexpr Status BUSY = TrackerStatus_Status_BUSY;
  static constexpr Status ERROR = TrackerStatus_Status_ERROR;
  static constexpr Status OCCLUDED = TrackerStatus_Status_OCCLUDED;
  static inline bool Status_IsValid(int value) {
    return TrackerStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = TrackerStatus_Status_Status_MIN;
  static constexpr Status Status_MAX = TrackerStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = TrackerStatus_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return TrackerStatus_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return TrackerStatus_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return TrackerStatus_Status_Parse(name, value);
  }

  using Confidence = TrackerStatus_Confidence;
  static constexpr Confidence NO = TrackerStatus_Confidence_NO;
  static constexpr Confidence LOW = TrackerStatus_Confidence_LOW;
  static constexpr Confidence MEDIUM = TrackerStatus_Confidence_MEDIUM;
  static constexpr Confidence HIGH = TrackerStatus_Confidence_HIGH;
  static inline bool Confidence_IsValid(int value) {
    return TrackerStatus_Confidence_IsValid(value);
  }
  static constexpr Confidence Confidence_MIN = TrackerStatus_Confidence_Confidence_MIN;
  static constexpr Confidence Confidence_MAX = TrackerStatus_Confidence_Confidence_MAX;
  static constexpr int Confidence_ARRAYSIZE = TrackerStatus_Confidence_Confidence_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Confidence_descriptor() {
    return TrackerStatus_Confidence_descriptor();
  }
  template <typename T>
  static inline const std::string& Confidence_Name(T value) {
    return TrackerStatus_Confidence_Name(value);
  }
  static inline bool Confidence_Parse(absl::string_view name, Confidence* value) {
    return TrackerStatus_Confidence_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 3,
    kTrackerIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kConfidenceFieldNumber = 4,
  };
  // map<string, string> extra = 3;
  int extra_size() const;
  private:
  int _internal_extra_size() const;

  public:
  void clear_extra() ;
  const ::google::protobuf::Map<std::string, std::string>& extra() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_extra();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_extra() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_extra();

  public:
  // int32 tracker_id = 1;
  void clear_tracker_id() ;
  ::int32_t tracker_id() const;
  void set_tracker_id(::int32_t value);

  private:
  ::int32_t _internal_tracker_id() const;
  void _internal_set_tracker_id(::int32_t value);

  public:
  // .messages.TrackerStatus.Status status = 2;
  void clear_status() ;
  ::messages::TrackerStatus_Status status() const;
  void set_status(::messages::TrackerStatus_Status value);

  private:
  ::messages::TrackerStatus_Status _internal_status() const;
  void _internal_set_status(::messages::TrackerStatus_Status value);

  public:
  // optional .messages.TrackerStatus.Confidence confidence = 4;
  bool has_confidence() const;
  void clear_confidence() ;
  ::messages::TrackerStatus_Confidence confidence() const;
  void set_confidence(::messages::TrackerStatus_Confidence value);

  private:
  ::messages::TrackerStatus_Confidence _internal_confidence() const;
  void _internal_set_confidence(::messages::TrackerStatus_Confidence value);

  public:
  // @@protoc_insertion_point(class_scope:messages.TrackerStatus)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<TrackerStatus_ExtraEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        extra_;
    ::int32_t tracker_id_;
    int status_;
    int confidence_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};// -------------------------------------------------------------------

class ProtobufMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messages.ProtobufMessage) */ {
 public:
  inline ProtobufMessage() : ProtobufMessage(nullptr) {}
  ~ProtobufMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProtobufMessage(::google::protobuf::internal::ConstantInitialized);

  inline ProtobufMessage(const ProtobufMessage& from)
      : ProtobufMessage(nullptr, from) {}
  ProtobufMessage(ProtobufMessage&& from) noexcept
    : ProtobufMessage() {
    *this = ::std::move(from);
  }

  inline ProtobufMessage& operator=(const ProtobufMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtobufMessage& operator=(ProtobufMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtobufMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kPosition = 1,
    kUserAction = 2,
    kTrackerAdded = 3,
    kTrackerStatus = 4,
    kBattery = 5,
    MESSAGE_NOT_SET = 0,
  };

  static inline const ProtobufMessage* internal_default_instance() {
    return reinterpret_cast<const ProtobufMessage*>(
               &_ProtobufMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProtobufMessage& a, ProtobufMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtobufMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtobufMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtobufMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtobufMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProtobufMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProtobufMessage& from) {
    ProtobufMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProtobufMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messages.ProtobufMessage";
  }
  protected:
  explicit ProtobufMessage(::google::protobuf::Arena* arena);
  ProtobufMessage(::google::protobuf::Arena* arena, const ProtobufMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kUserActionFieldNumber = 2,
    kTrackerAddedFieldNumber = 3,
    kTrackerStatusFieldNumber = 4,
    kBatteryFieldNumber = 5,
  };
  // .messages.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;

  public:
  void clear_position() ;
  const ::messages::Position& position() const;
  PROTOBUF_NODISCARD ::messages::Position* release_position();
  ::messages::Position* mutable_position();
  void set_allocated_position(::messages::Position* value);
  void unsafe_arena_set_allocated_position(::messages::Position* value);
  ::messages::Position* unsafe_arena_release_position();

  private:
  const ::messages::Position& _internal_position() const;
  ::messages::Position* _internal_mutable_position();

  public:
  // .messages.UserAction user_action = 2;
  bool has_user_action() const;
  private:
  bool _internal_has_user_action() const;

  public:
  void clear_user_action() ;
  const ::messages::UserAction& user_action() const;
  PROTOBUF_NODISCARD ::messages::UserAction* release_user_action();
  ::messages::UserAction* mutable_user_action();
  void set_allocated_user_action(::messages::UserAction* value);
  void unsafe_arena_set_allocated_user_action(::messages::UserAction* value);
  ::messages::UserAction* unsafe_arena_release_user_action();

  private:
  const ::messages::UserAction& _internal_user_action() const;
  ::messages::UserAction* _internal_mutable_user_action();

  public:
  // .messages.TrackerAdded tracker_added = 3;
  bool has_tracker_added() const;
  private:
  bool _internal_has_tracker_added() const;

  public:
  void clear_tracker_added() ;
  const ::messages::TrackerAdded& tracker_added() const;
  PROTOBUF_NODISCARD ::messages::TrackerAdded* release_tracker_added();
  ::messages::TrackerAdded* mutable_tracker_added();
  void set_allocated_tracker_added(::messages::TrackerAdded* value);
  void unsafe_arena_set_allocated_tracker_added(::messages::TrackerAdded* value);
  ::messages::TrackerAdded* unsafe_arena_release_tracker_added();

  private:
  const ::messages::TrackerAdded& _internal_tracker_added() const;
  ::messages::TrackerAdded* _internal_mutable_tracker_added();

  public:
  // .messages.TrackerStatus tracker_status = 4;
  bool has_tracker_status() const;
  private:
  bool _internal_has_tracker_status() const;

  public:
  void clear_tracker_status() ;
  const ::messages::TrackerStatus& tracker_status() const;
  PROTOBUF_NODISCARD ::messages::TrackerStatus* release_tracker_status();
  ::messages::TrackerStatus* mutable_tracker_status();
  void set_allocated_tracker_status(::messages::TrackerStatus* value);
  void unsafe_arena_set_allocated_tracker_status(::messages::TrackerStatus* value);
  ::messages::TrackerStatus* unsafe_arena_release_tracker_status();

  private:
  const ::messages::TrackerStatus& _internal_tracker_status() const;
  ::messages::TrackerStatus* _internal_mutable_tracker_status();

  public:
  // .messages.Battery battery = 5;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;

  public:
  void clear_battery() ;
  const ::messages::Battery& battery() const;
  PROTOBUF_NODISCARD ::messages::Battery* release_battery();
  ::messages::Battery* mutable_battery();
  void set_allocated_battery(::messages::Battery* value);
  void unsafe_arena_set_allocated_battery(::messages::Battery* value);
  ::messages::Battery* unsafe_arena_release_battery();

  private:
  const ::messages::Battery& _internal_battery() const;
  ::messages::Battery* _internal_mutable_battery();

  public:
  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:messages.ProtobufMessage)
 private:
  class _Internal;
  void set_has_position();
  void set_has_user_action();
  void set_has_tracker_added();
  void set_has_tracker_status();
  void set_has_battery();

  inline bool has_message() const;
  inline void clear_has_message();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::messages::Position* position_;
      ::messages::UserAction* user_action_;
      ::messages::TrackerAdded* tracker_added_;
      ::messages::TrackerStatus* tracker_status_;
      ::messages::Battery* battery_;
    } message_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtobufMessages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PingPong

// -------------------------------------------------------------------

// Position

// int32 tracker_id = 1;
inline void Position::clear_tracker_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tracker_id_ = 0;
}
inline ::int32_t Position::tracker_id() const {
  // @@protoc_insertion_point(field_get:messages.Position.tracker_id)
  return _internal_tracker_id();
}
inline void Position::set_tracker_id(::int32_t value) {
  _internal_set_tracker_id(value);
  // @@protoc_insertion_point(field_set:messages.Position.tracker_id)
}
inline ::int32_t Position::_internal_tracker_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tracker_id_;
}
inline void Position::_internal_set_tracker_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tracker_id_ = value;
}

// optional float x = 2;
inline bool Position::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Position::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:messages.Position.x)
  return _internal_x();
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:messages.Position.x)
}
inline float Position::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Position::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}

// optional float y = 3;
inline bool Position::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Position::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:messages.Position.y)
  return _internal_y();
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:messages.Position.y)
}
inline float Position::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Position::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}

// optional float z = 4;
inline bool Position::has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Position::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:messages.Position.z)
  return _internal_z();
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:messages.Position.z)
}
inline float Position::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Position::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}

// float qx = 5;
inline void Position::clear_qx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qx_ = 0;
}
inline float Position::qx() const {
  // @@protoc_insertion_point(field_get:messages.Position.qx)
  return _internal_qx();
}
inline void Position::set_qx(float value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:messages.Position.qx)
}
inline float Position::_internal_qx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qx_;
}
inline void Position::_internal_set_qx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.qx_ = value;
}

// float qy = 6;
inline void Position::clear_qy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qy_ = 0;
}
inline float Position::qy() const {
  // @@protoc_insertion_point(field_get:messages.Position.qy)
  return _internal_qy();
}
inline void Position::set_qy(float value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:messages.Position.qy)
}
inline float Position::_internal_qy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qy_;
}
inline void Position::_internal_set_qy(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.qy_ = value;
}

// float qz = 7;
inline void Position::clear_qz() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qz_ = 0;
}
inline float Position::qz() const {
  // @@protoc_insertion_point(field_get:messages.Position.qz)
  return _internal_qz();
}
inline void Position::set_qz(float value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:messages.Position.qz)
}
inline float Position::_internal_qz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qz_;
}
inline void Position::_internal_set_qz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.qz_ = value;
}

// float qw = 8;
inline void Position::clear_qw() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qw_ = 0;
}
inline float Position::qw() const {
  // @@protoc_insertion_point(field_get:messages.Position.qw)
  return _internal_qw();
}
inline void Position::set_qw(float value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:messages.Position.qw)
}
inline float Position::_internal_qw() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qw_;
}
inline void Position::_internal_set_qw(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.qw_ = value;
}

// optional .messages.Position.DataSource data_source = 9;
inline bool Position::has_data_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Position::clear_data_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_source_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::messages::Position_DataSource Position::data_source() const {
  // @@protoc_insertion_point(field_get:messages.Position.data_source)
  return _internal_data_source();
}
inline void Position::set_data_source(::messages::Position_DataSource value) {
  _internal_set_data_source(value);
  // @@protoc_insertion_point(field_set:messages.Position.data_source)
}
inline ::messages::Position_DataSource Position::_internal_data_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::messages::Position_DataSource>(_impl_.data_source_);
}
inline void Position::_internal_set_data_source(::messages::Position_DataSource value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.data_source_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserAction

// string name = 1;
inline void UserAction::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserAction::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messages.UserAction.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserAction::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messages.UserAction.name)
}
inline std::string* UserAction::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:messages.UserAction.name)
  return _s;
}
inline const std::string& UserAction::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void UserAction::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* UserAction::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* UserAction::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messages.UserAction.name)
  return _impl_.name_.Release();
}
inline void UserAction::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.UserAction.name)
}

// map<string, string> action_arguments = 2;
inline int UserAction::_internal_action_arguments_size() const {
  return _internal_action_arguments().size();
}
inline int UserAction::action_arguments_size() const {
  return _internal_action_arguments_size();
}
inline void UserAction::clear_action_arguments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.action_arguments_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserAction::_internal_action_arguments() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.action_arguments_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& UserAction::action_arguments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:messages.UserAction.action_arguments)
  return _internal_action_arguments();
}
inline ::google::protobuf::Map<std::string, std::string>* UserAction::_internal_mutable_action_arguments() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.action_arguments_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* UserAction::mutable_action_arguments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:messages.UserAction.action_arguments)
  return _internal_mutable_action_arguments();
}

// -------------------------------------------------------------------

// TrackerAdded

// int32 tracker_id = 1;
inline void TrackerAdded::clear_tracker_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tracker_id_ = 0;
}
inline ::int32_t TrackerAdded::tracker_id() const {
  // @@protoc_insertion_point(field_get:messages.TrackerAdded.tracker_id)
  return _internal_tracker_id();
}
inline void TrackerAdded::set_tracker_id(::int32_t value) {
  _internal_set_tracker_id(value);
  // @@protoc_insertion_point(field_set:messages.TrackerAdded.tracker_id)
}
inline ::int32_t TrackerAdded::_internal_tracker_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tracker_id_;
}
inline void TrackerAdded::_internal_set_tracker_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tracker_id_ = value;
}

// string tracker_serial = 2;
inline void TrackerAdded::clear_tracker_serial() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tracker_serial_.ClearToEmpty();
}
inline const std::string& TrackerAdded::tracker_serial() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messages.TrackerAdded.tracker_serial)
  return _internal_tracker_serial();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrackerAdded::set_tracker_serial(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tracker_serial_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messages.TrackerAdded.tracker_serial)
}
inline std::string* TrackerAdded::mutable_tracker_serial() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tracker_serial();
  // @@protoc_insertion_point(field_mutable:messages.TrackerAdded.tracker_serial)
  return _s;
}
inline const std::string& TrackerAdded::_internal_tracker_serial() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tracker_serial_.Get();
}
inline void TrackerAdded::_internal_set_tracker_serial(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tracker_serial_.Set(value, GetArena());
}
inline std::string* TrackerAdded::_internal_mutable_tracker_serial() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tracker_serial_.Mutable( GetArena());
}
inline std::string* TrackerAdded::release_tracker_serial() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messages.TrackerAdded.tracker_serial)
  return _impl_.tracker_serial_.Release();
}
inline void TrackerAdded::set_allocated_tracker_serial(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tracker_serial_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tracker_serial_.IsDefault()) {
          _impl_.tracker_serial_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.TrackerAdded.tracker_serial)
}

// string tracker_name = 3;
inline void TrackerAdded::clear_tracker_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tracker_name_.ClearToEmpty();
}
inline const std::string& TrackerAdded::tracker_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messages.TrackerAdded.tracker_name)
  return _internal_tracker_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TrackerAdded::set_tracker_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tracker_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messages.TrackerAdded.tracker_name)
}
inline std::string* TrackerAdded::mutable_tracker_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tracker_name();
  // @@protoc_insertion_point(field_mutable:messages.TrackerAdded.tracker_name)
  return _s;
}
inline const std::string& TrackerAdded::_internal_tracker_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tracker_name_.Get();
}
inline void TrackerAdded::_internal_set_tracker_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tracker_name_.Set(value, GetArena());
}
inline std::string* TrackerAdded::_internal_mutable_tracker_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tracker_name_.Mutable( GetArena());
}
inline std::string* TrackerAdded::release_tracker_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messages.TrackerAdded.tracker_name)
  return _impl_.tracker_name_.Release();
}
inline void TrackerAdded::set_allocated_tracker_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tracker_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tracker_name_.IsDefault()) {
          _impl_.tracker_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.TrackerAdded.tracker_name)
}

// int32 tracker_role = 4;
inline void TrackerAdded::clear_tracker_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tracker_role_ = 0;
}
inline ::int32_t TrackerAdded::tracker_role() const {
  // @@protoc_insertion_point(field_get:messages.TrackerAdded.tracker_role)
  return _internal_tracker_role();
}
inline void TrackerAdded::set_tracker_role(::int32_t value) {
  _internal_set_tracker_role(value);
  // @@protoc_insertion_point(field_set:messages.TrackerAdded.tracker_role)
}
inline ::int32_t TrackerAdded::_internal_tracker_role() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tracker_role_;
}
inline void TrackerAdded::_internal_set_tracker_role(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tracker_role_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TrackerStatus

// int32 tracker_id = 1;
inline void TrackerStatus::clear_tracker_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tracker_id_ = 0;
}
inline ::int32_t TrackerStatus::tracker_id() const {
  // @@protoc_insertion_point(field_get:messages.TrackerStatus.tracker_id)
  return _internal_tracker_id();
}
inline void TrackerStatus::set_tracker_id(::int32_t value) {
  _internal_set_tracker_id(value);
  // @@protoc_insertion_point(field_set:messages.TrackerStatus.tracker_id)
}
inline ::int32_t TrackerStatus::_internal_tracker_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tracker_id_;
}
inline void TrackerStatus::_internal_set_tracker_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tracker_id_ = value;
}

// .messages.TrackerStatus.Status status = 2;
inline void TrackerStatus::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::messages::TrackerStatus_Status TrackerStatus::status() const {
  // @@protoc_insertion_point(field_get:messages.TrackerStatus.status)
  return _internal_status();
}
inline void TrackerStatus::set_status(::messages::TrackerStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:messages.TrackerStatus.status)
}
inline ::messages::TrackerStatus_Status TrackerStatus::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::messages::TrackerStatus_Status>(_impl_.status_);
}
inline void TrackerStatus::_internal_set_status(::messages::TrackerStatus_Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// map<string, string> extra = 3;
inline int TrackerStatus::_internal_extra_size() const {
  return _internal_extra().size();
}
inline int TrackerStatus::extra_size() const {
  return _internal_extra_size();
}
inline void TrackerStatus::clear_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extra_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TrackerStatus::_internal_extra() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extra_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TrackerStatus::extra() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:messages.TrackerStatus.extra)
  return _internal_extra();
}
inline ::google::protobuf::Map<std::string, std::string>* TrackerStatus::_internal_mutable_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.extra_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TrackerStatus::mutable_extra() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:messages.TrackerStatus.extra)
  return _internal_mutable_extra();
}

// optional .messages.TrackerStatus.Confidence confidence = 4;
inline bool TrackerStatus::has_confidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TrackerStatus::clear_confidence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.confidence_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::messages::TrackerStatus_Confidence TrackerStatus::confidence() const {
  // @@protoc_insertion_point(field_get:messages.TrackerStatus.confidence)
  return _internal_confidence();
}
inline void TrackerStatus::set_confidence(::messages::TrackerStatus_Confidence value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:messages.TrackerStatus.confidence)
}
inline ::messages::TrackerStatus_Confidence TrackerStatus::_internal_confidence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::messages::TrackerStatus_Confidence>(_impl_.confidence_);
}
inline void TrackerStatus::_internal_set_confidence(::messages::TrackerStatus_Confidence value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.confidence_ = value;
}

// -------------------------------------------------------------------

// Battery

// int32 tracker_id = 1;
inline void Battery::clear_tracker_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tracker_id_ = 0;
}
inline ::int32_t Battery::tracker_id() const {
  // @@protoc_insertion_point(field_get:messages.Battery.tracker_id)
  return _internal_tracker_id();
}
inline void Battery::set_tracker_id(::int32_t value) {
  _internal_set_tracker_id(value);
  // @@protoc_insertion_point(field_set:messages.Battery.tracker_id)
}
inline ::int32_t Battery::_internal_tracker_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tracker_id_;
}
inline void Battery::_internal_set_tracker_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tracker_id_ = value;
}

// float battery_level = 2;
inline void Battery::clear_battery_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.battery_level_ = 0;
}
inline float Battery::battery_level() const {
  // @@protoc_insertion_point(field_get:messages.Battery.battery_level)
  return _internal_battery_level();
}
inline void Battery::set_battery_level(float value) {
  _internal_set_battery_level(value);
  // @@protoc_insertion_point(field_set:messages.Battery.battery_level)
}
inline float Battery::_internal_battery_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.battery_level_;
}
inline void Battery::_internal_set_battery_level(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.battery_level_ = value;
}

// bool is_charging = 3;
inline void Battery::clear_is_charging() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_charging_ = false;
}
inline bool Battery::is_charging() const {
  // @@protoc_insertion_point(field_get:messages.Battery.is_charging)
  return _internal_is_charging();
}
inline void Battery::set_is_charging(bool value) {
  _internal_set_is_charging(value);
  // @@protoc_insertion_point(field_set:messages.Battery.is_charging)
}
inline bool Battery::_internal_is_charging() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_charging_;
}
inline void Battery::_internal_set_is_charging(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_charging_ = value;
}

// -------------------------------------------------------------------

// ProtobufMessage

// .messages.Position position = 1;
inline bool ProtobufMessage::has_position() const {
  return message_case() == kPosition;
}
inline bool ProtobufMessage::_internal_has_position() const {
  return message_case() == kPosition;
}
inline void ProtobufMessage::set_has_position() {
  _impl_._oneof_case_[0] = kPosition;
}
inline void ProtobufMessage::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kPosition) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.position_;
    }
    clear_has_message();
  }
}
inline ::messages::Position* ProtobufMessage::release_position() {
  // @@protoc_insertion_point(field_release:messages.ProtobufMessage.position)
  if (message_case() == kPosition) {
    clear_has_message();
    auto* temp = _impl_.message_.position_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::messages::Position& ProtobufMessage::_internal_position() const {
  return message_case() == kPosition ? *_impl_.message_.position_ : reinterpret_cast<::messages::Position&>(::messages::_Position_default_instance_);
}
inline const ::messages::Position& ProtobufMessage::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messages.ProtobufMessage.position)
  return _internal_position();
}
inline ::messages::Position* ProtobufMessage::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ProtobufMessage.position)
  if (message_case() == kPosition) {
    clear_has_message();
    auto* temp = _impl_.message_.position_;
    _impl_.message_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufMessage::unsafe_arena_set_allocated_position(::messages::Position* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_position();
    _impl_.message_.position_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ProtobufMessage.position)
}
inline ::messages::Position* ProtobufMessage::_internal_mutable_position() {
  if (message_case() != kPosition) {
    clear_message();
    set_has_position();
    _impl_.message_.position_ = CreateMaybeMessage<::messages::Position>(GetArena());
  }
  return _impl_.message_.position_;
}
inline ::messages::Position* ProtobufMessage::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::messages::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:messages.ProtobufMessage.position)
  return _msg;
}

// .messages.UserAction user_action = 2;
inline bool ProtobufMessage::has_user_action() const {
  return message_case() == kUserAction;
}
inline bool ProtobufMessage::_internal_has_user_action() const {
  return message_case() == kUserAction;
}
inline void ProtobufMessage::set_has_user_action() {
  _impl_._oneof_case_[0] = kUserAction;
}
inline void ProtobufMessage::clear_user_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kUserAction) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.user_action_;
    }
    clear_has_message();
  }
}
inline ::messages::UserAction* ProtobufMessage::release_user_action() {
  // @@protoc_insertion_point(field_release:messages.ProtobufMessage.user_action)
  if (message_case() == kUserAction) {
    clear_has_message();
    auto* temp = _impl_.message_.user_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.user_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::messages::UserAction& ProtobufMessage::_internal_user_action() const {
  return message_case() == kUserAction ? *_impl_.message_.user_action_ : reinterpret_cast<::messages::UserAction&>(::messages::_UserAction_default_instance_);
}
inline const ::messages::UserAction& ProtobufMessage::user_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messages.ProtobufMessage.user_action)
  return _internal_user_action();
}
inline ::messages::UserAction* ProtobufMessage::unsafe_arena_release_user_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ProtobufMessage.user_action)
  if (message_case() == kUserAction) {
    clear_has_message();
    auto* temp = _impl_.message_.user_action_;
    _impl_.message_.user_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufMessage::unsafe_arena_set_allocated_user_action(::messages::UserAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_user_action();
    _impl_.message_.user_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ProtobufMessage.user_action)
}
inline ::messages::UserAction* ProtobufMessage::_internal_mutable_user_action() {
  if (message_case() != kUserAction) {
    clear_message();
    set_has_user_action();
    _impl_.message_.user_action_ = CreateMaybeMessage<::messages::UserAction>(GetArena());
  }
  return _impl_.message_.user_action_;
}
inline ::messages::UserAction* ProtobufMessage::mutable_user_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::messages::UserAction* _msg = _internal_mutable_user_action();
  // @@protoc_insertion_point(field_mutable:messages.ProtobufMessage.user_action)
  return _msg;
}

// .messages.TrackerAdded tracker_added = 3;
inline bool ProtobufMessage::has_tracker_added() const {
  return message_case() == kTrackerAdded;
}
inline bool ProtobufMessage::_internal_has_tracker_added() const {
  return message_case() == kTrackerAdded;
}
inline void ProtobufMessage::set_has_tracker_added() {
  _impl_._oneof_case_[0] = kTrackerAdded;
}
inline void ProtobufMessage::clear_tracker_added() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kTrackerAdded) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.tracker_added_;
    }
    clear_has_message();
  }
}
inline ::messages::TrackerAdded* ProtobufMessage::release_tracker_added() {
  // @@protoc_insertion_point(field_release:messages.ProtobufMessage.tracker_added)
  if (message_case() == kTrackerAdded) {
    clear_has_message();
    auto* temp = _impl_.message_.tracker_added_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.tracker_added_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::messages::TrackerAdded& ProtobufMessage::_internal_tracker_added() const {
  return message_case() == kTrackerAdded ? *_impl_.message_.tracker_added_ : reinterpret_cast<::messages::TrackerAdded&>(::messages::_TrackerAdded_default_instance_);
}
inline const ::messages::TrackerAdded& ProtobufMessage::tracker_added() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messages.ProtobufMessage.tracker_added)
  return _internal_tracker_added();
}
inline ::messages::TrackerAdded* ProtobufMessage::unsafe_arena_release_tracker_added() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ProtobufMessage.tracker_added)
  if (message_case() == kTrackerAdded) {
    clear_has_message();
    auto* temp = _impl_.message_.tracker_added_;
    _impl_.message_.tracker_added_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufMessage::unsafe_arena_set_allocated_tracker_added(::messages::TrackerAdded* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_tracker_added();
    _impl_.message_.tracker_added_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ProtobufMessage.tracker_added)
}
inline ::messages::TrackerAdded* ProtobufMessage::_internal_mutable_tracker_added() {
  if (message_case() != kTrackerAdded) {
    clear_message();
    set_has_tracker_added();
    _impl_.message_.tracker_added_ = CreateMaybeMessage<::messages::TrackerAdded>(GetArena());
  }
  return _impl_.message_.tracker_added_;
}
inline ::messages::TrackerAdded* ProtobufMessage::mutable_tracker_added() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::messages::TrackerAdded* _msg = _internal_mutable_tracker_added();
  // @@protoc_insertion_point(field_mutable:messages.ProtobufMessage.tracker_added)
  return _msg;
}

// .messages.TrackerStatus tracker_status = 4;
inline bool ProtobufMessage::has_tracker_status() const {
  return message_case() == kTrackerStatus;
}
inline bool ProtobufMessage::_internal_has_tracker_status() const {
  return message_case() == kTrackerStatus;
}
inline void ProtobufMessage::set_has_tracker_status() {
  _impl_._oneof_case_[0] = kTrackerStatus;
}
inline void ProtobufMessage::clear_tracker_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kTrackerStatus) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.tracker_status_;
    }
    clear_has_message();
  }
}
inline ::messages::TrackerStatus* ProtobufMessage::release_tracker_status() {
  // @@protoc_insertion_point(field_release:messages.ProtobufMessage.tracker_status)
  if (message_case() == kTrackerStatus) {
    clear_has_message();
    auto* temp = _impl_.message_.tracker_status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.tracker_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::messages::TrackerStatus& ProtobufMessage::_internal_tracker_status() const {
  return message_case() == kTrackerStatus ? *_impl_.message_.tracker_status_ : reinterpret_cast<::messages::TrackerStatus&>(::messages::_TrackerStatus_default_instance_);
}
inline const ::messages::TrackerStatus& ProtobufMessage::tracker_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messages.ProtobufMessage.tracker_status)
  return _internal_tracker_status();
}
inline ::messages::TrackerStatus* ProtobufMessage::unsafe_arena_release_tracker_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ProtobufMessage.tracker_status)
  if (message_case() == kTrackerStatus) {
    clear_has_message();
    auto* temp = _impl_.message_.tracker_status_;
    _impl_.message_.tracker_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufMessage::unsafe_arena_set_allocated_tracker_status(::messages::TrackerStatus* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_tracker_status();
    _impl_.message_.tracker_status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ProtobufMessage.tracker_status)
}
inline ::messages::TrackerStatus* ProtobufMessage::_internal_mutable_tracker_status() {
  if (message_case() != kTrackerStatus) {
    clear_message();
    set_has_tracker_status();
    _impl_.message_.tracker_status_ = CreateMaybeMessage<::messages::TrackerStatus>(GetArena());
  }
  return _impl_.message_.tracker_status_;
}
inline ::messages::TrackerStatus* ProtobufMessage::mutable_tracker_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::messages::TrackerStatus* _msg = _internal_mutable_tracker_status();
  // @@protoc_insertion_point(field_mutable:messages.ProtobufMessage.tracker_status)
  return _msg;
}

// .messages.Battery battery = 5;
inline bool ProtobufMessage::has_battery() const {
  return message_case() == kBattery;
}
inline bool ProtobufMessage::_internal_has_battery() const {
  return message_case() == kBattery;
}
inline void ProtobufMessage::set_has_battery() {
  _impl_._oneof_case_[0] = kBattery;
}
inline void ProtobufMessage::clear_battery() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_case() == kBattery) {
    if (GetArena() == nullptr) {
      delete _impl_.message_.battery_;
    }
    clear_has_message();
  }
}
inline ::messages::Battery* ProtobufMessage::release_battery() {
  // @@protoc_insertion_point(field_release:messages.ProtobufMessage.battery)
  if (message_case() == kBattery) {
    clear_has_message();
    auto* temp = _impl_.message_.battery_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.battery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::messages::Battery& ProtobufMessage::_internal_battery() const {
  return message_case() == kBattery ? *_impl_.message_.battery_ : reinterpret_cast<::messages::Battery&>(::messages::_Battery_default_instance_);
}
inline const ::messages::Battery& ProtobufMessage::battery() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messages.ProtobufMessage.battery)
  return _internal_battery();
}
inline ::messages::Battery* ProtobufMessage::unsafe_arena_release_battery() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ProtobufMessage.battery)
  if (message_case() == kBattery) {
    clear_has_message();
    auto* temp = _impl_.message_.battery_;
    _impl_.message_.battery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProtobufMessage::unsafe_arena_set_allocated_battery(::messages::Battery* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_message();
  if (value) {
    set_has_battery();
    _impl_.message_.battery_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ProtobufMessage.battery)
}
inline ::messages::Battery* ProtobufMessage::_internal_mutable_battery() {
  if (message_case() != kBattery) {
    clear_message();
    set_has_battery();
    _impl_.message_.battery_ = CreateMaybeMessage<::messages::Battery>(GetArena());
  }
  return _impl_.message_.battery_;
}
inline ::messages::Battery* ProtobufMessage::mutable_battery() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::messages::Battery* _msg = _internal_mutable_battery();
  // @@protoc_insertion_point(field_mutable:messages.ProtobufMessage.battery)
  return _msg;
}

inline bool ProtobufMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ProtobufMessage::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ProtobufMessage::MessageCase ProtobufMessage::message_case() const {
  return ProtobufMessage::MessageCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::messages::Position_DataSource> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::messages::Position_DataSource>() {
  return ::messages::Position_DataSource_descriptor();
}
template <>
struct is_proto_enum<::messages::TrackerStatus_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::messages::TrackerStatus_Status>() {
  return ::messages::TrackerStatus_Status_descriptor();
}
template <>
struct is_proto_enum<::messages::TrackerStatus_Confidence> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::messages::TrackerStatus_Confidence>() {
  return ::messages::TrackerStatus_Confidence_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ProtobufMessages_2eproto_2epb_2eh
